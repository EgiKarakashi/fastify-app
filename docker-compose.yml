version: '3.8'

services:
  setup-web-app:
    image: node:16.15.0
    working_dir: /usr/src/app
    entrypoint: ["npm", "install"]
    volumes:
      - ./docker-data/node_modules:/usr/src/app/node_modules
      - ./package.json:/usr/src/app/package.json
      - ./package-lock.json:/usr/src/app/package-lock.json

  web-app:
    container_name: web-app
    image: node:16.15.0
    working_dir: /usr/src/app
    entrypoint: ["npm", "start"]
    ports:
      - "${WEB_APP_HOST:-8080}:8080"
    volumes:
      - ./docker-data/node_modules:/usr/src/app/node_modules
      - ./package.json:/usr/src/app/package.json
      - ./package-lock.json:/usr/src/app/package-lock.json
      - .:/usr/src/app
    env_file:
      - .env
    environment:
      - POSTGRES_DB_CONNECTION_STRING:'${POSTGRES_DB_CONNECTION_STRING}'
      - POSTGRES_TEST_DB_CONNECTION_STRING:'${POSTGRES_TEST_DB_CONNECTION_STRING}'
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    container_name: postgres
    image: postgres:14
    ports:
      - '5432:5432'
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 10s
      timeout: 5s
      retries: 60

  adminer:
    container_name: adminer
    image: adminer:4.8.1
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - '${ADMINER_HOST_PORT:-8081}:8080'
volumes:
  pgdata: